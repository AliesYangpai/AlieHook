hook ams实现集中式登录架构 
案例举例：
淘宝、京东的内登录场景

实现方案：  
a.上层isLogin代码判断 判断过多不太好处理
b.hook ams代理实现

hook的定义：
通过反射将系统代码拉出，之后加入自己的业务逻辑之后再注入系统 

hook技术分类：
1.java层hook 【反射】
2.NDK层hook

hook的实现思路：
1.找到hook点，java中必须是静态变量：目的是还原系统对象，而非新建对象，观察源码后反射
  先观察源码，再反射
2.插入在hook周围插入业务逻辑
  2.1.实现接口法：这种方式就是在系统设计中目标hook点 刚好有对应的接口，因此我们外部直接实现这个接口就可以达到，外部插入逻辑到系统的目的	 
  2.2.动态代理法：思路是将目标hook对象用动态代理 重新生成一个 hook fix对象，对这个对象中加入我们自己的逻辑，然后再讲这个hook fix给注入回去，这样就能欺骗到系统，达到我们的目的
	   了

核心业务开始：
hook ams来进行代集中式业务开展：
8.那么我们就从startActivity开始入手吧，因为我们需要确认的是到底是谁调用的startActivity？
，ActivityManagerNative.getDefault()  ===    Singleton.create()       ===  IActivityManager .startActivity（） 

 8.1层层调用后，发现是mInstrumentation.execStartActivity方法调用的 （由于现在是hook开始阶段，可以先观察静态方法） 
 8.2找到了gDefault.get()，这个gDefult又是一个全局的静态变量，此时联想下 我们刚才的那个java hook点的知识，因此 这个就有可能是hook点了
 8.3看看get方法做了什么事情 singleTon是个泛型单例，里面有个抽象类create方法返回当前对象的泛型，而这个create的实例化就在初始化getDault变量中实例化了，返回一个
 8.4.IActivityManager就是一个Ibinder对象，这个Ibinder对象才开启了startActivity,因此，确定hook点应该是【IActivityManager】
     因为最终是IActivityManager开启的startActivity（可以从外层代码调用的时候看到：ActivityManagerNative.getDefault().startActivity）
	 但是我们的hook变量应该是gDefault 而不是IActivityManager 因为 IActivityManager的实例化是Singleton的一个抽象方法中实例化的，并且它也只是Singleton中的一个
	 成员变量非静态，所以 我们真的要hook的是gDefault ，之后再反射成员变量 就可以了
	 
 8.5.反射得到hook点之后，接下来我们需要在系统外部插入自己的逻辑（针对这个例子，我们需要做的就是系统调用startActivity之前，插入我们自己的逻辑）
     那么怎样插入呢？
 java层中系统外部插入逻辑有2中方法：
      目的：都是将系统代码设置到我们的apk中来执行
     1.动态代理：
	   思路是将目标hook对象用动态代理 重新生成一个 hook fix对象，对这个对象中加入我们自己的逻辑，然后再讲这个hook fix给注入回去，这样就能欺骗到系统，达到我们的目的
	   了
	   1.先搞清楚要去代理谁
	
     2.设置接口 ：这种方式就是在系统设计中目标hook点 刚好有对应的接口，因此我们外部直接实现这个接口就可以达到，外部插入逻辑到系统的目的	 
 

=============================================
我的问题：  
1.为什么java中hook对象必须是静态变量？
2.为什么最终的跳转activity并没有在清单文件中声明？

1.hook技术安全吗？为什么？
答：肯定安全，但是说明为啥安全
2.如何设置启动模式？ 
3.怎样在hook中插入自己的逻辑？
4.业务中activity未在androidManifest中定义，为什么还能在内登录业务中跳转？
5.为什么不把4中的activity在androidManifest中定义呢？
6.不是说java中的hook点必须是凌驾于对象以上的吗？为什么startActivity也能作为hook点呢？
答：startActivity只不过是个入手点，而并非hook点
7.什么是ams集中式登录？如何理解集中式登录？  
8.为什么hook中要跳转的activity不在清单文件中定义？
答：难道是因为PMS的关系？
9.什么是binder？
10.总说反射会影响性能，为什么？
答：不会影响性能，并且反射只会调用一次

11.逻辑插入的动态代理是什么？
答：这个总体思路就是偷天换日，来欺骗系统，并达到插入开发者逻辑的意思，将目标hook对象 用动态代理生成后重新注入回去
12.动态代理的具体实现说明：
13.为什么在设置代理的时候 要使用Thread.currentThread().getContextClassLoader()?
14.InvocationHandler invocationHandler：分发方法来被调用，这个分发是什么意思？是分发第二个参数里面的接口吗？